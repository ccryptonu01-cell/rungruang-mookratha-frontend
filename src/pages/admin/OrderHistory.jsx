import React, { useEffect, useState } from "react";
import axios from "../../utils/axiosInstance";
import useEcomStore from "../../store/ecom-store";
import * as XLSX from "xlsx";
import { ArrowLeft, Download } from "lucide-react";
import { useNavigate } from "react-router-dom";

const OrderHistory = () => {
  const token = useEcomStore((state) => state.token);
  const [summary, setSummary] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [startDate, setStartDate] = useState("");
  const [month, setMonth] = useState("");
  const [year, setYear] = useState("");
  const [monthlySummary, setMonthlySummary] = useState(null);
  const navigate = useNavigate();

  const fetchSummary = async (start, end) => {
    try {
      setLoading(true);
      setError("");
      const url = start && end
        ? `/admin/orders/summary-7-days?start=${start}&end=${end}`
        : "/admin/orders/summary-7-days";

      const res = await axios.get(url, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setSummary(res.data.summary || []);
    } catch (err) {
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    } finally {
      setLoading(false);
    }
  };

  const fetchMonthlySummary = async () => {
    if (!year || !month) return;
    try {
      const res = await axios.get(
        `/admin/orders/summary-by-month?year=${year}&month=${month}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setMonthlySummary(res.data.summary);
    } catch (err) {
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ");
    }
  };

  useEffect(() => {
    if (token) fetchSummary();
  }, [token]);

  useEffect(() => {
    if (startDate && token) {
      const start = new Date(startDate);
      const end = new Date(start);
      end.setDate(start.getDate() + 6);

      const startStr = start.toISOString().split("T")[0];
      const endStr = end.toISOString().split("T")[0];

      fetchSummary(startStr, endStr);
    }
  }, [startDate, token]);

  const handleExportDaily = () => {
    const exportData = summary.map((row) => ({
      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: row.date,
      "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡∏ø)": row.total,
      "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå": row.orders,
      "‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß": row.paid,
    }));

    const worksheet = XLSX.utils.json_to_sheet(exportData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ 7 ‡∏ß‡∏±‡∏ô");
    XLSX.writeFile(workbook, "order-summary-7-days.xlsx");
  };

  const handleExportMonthly = () => {
    if (!monthlySummary) return;

    const exportData = [
      {
        ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: `${monthlySummary.month}/${monthlySummary.year}`,
        "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡∏ø)": monthlySummary.total,
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå": monthlySummary.orders,
        "‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß": monthlySummary.paid,
      },
    ];

    const worksheet = XLSX.utils.json_to_sheet(exportData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô");
    XLSX.writeFile(workbook, "order-summary-month.xlsx");
  };

  const handleReset = () => {
    setStartDate("");
    fetchSummary();
    setMonthlySummary(null);
  };

  return (
    <div className="p-4">
      <button
        onClick={() => navigate("/admin/orders")}
        className="mb-3 bg-gray-300 hover:bg-gray-400 text-gray-800 px-3 py-1 rounded shadow text-sm flex items-center gap-2"
      >
        <ArrowLeft size={16} />
        ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
      </button>
      <h1 className="text-xl font-bold mb-4 flex items-center gap-2">
        <span role="img">üìÖ</span> ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
      </h1>

      <div className="flex items-center gap-2 mb-4 flex-wrap">
        <label className="text-sm">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</label>
        <input
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          className="border rounded p-1"
        />
        <label className="text-sm ml-4">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</label>
        <select value={month} onChange={(e) => setMonth(e.target.value)} className="border rounded p-1">
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
          {Array.from({ length: 12 }, (_, i) => (
            <option key={i + 1} value={String(i + 1).padStart(2, "0")}>
              {i + 1}
            </option>
          ))}
        </select>
        <label className="text-sm">‡∏õ‡∏µ:</label>
        <input
          type="number"
          value={year}
          onChange={(e) => setYear(e.target.value)}
          placeholder="2025"
          className="border rounded p-1 w-24"
        />
        <button
          onClick={fetchMonthlySummary}
          className="bg-indigo-600 text-white px-3 py-1 rounded text-sm shadow"
        >
          üìÜ ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        </button>
        <button
          onClick={handleReset}
          className="bg-gray-600 text-white px-3 py-1 rounded text-sm shadow"
        >
          üïò ‡πÅ‡∏™‡∏î‡∏á 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        </button>
        <button
          onClick={handleExportDaily}
          className="bg-green-600 text-white px-3 py-1 rounded text-sm shadow flex items-center gap-1"
        >
          <Download size={16} /> Export ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        </button>
        {monthlySummary && (
          <button
            onClick={handleExportMonthly}
            className="bg-purple-600 text-white px-3 py-1 rounded text-sm shadow flex items-center gap-1"
          >
            <Download size={16} /> Export ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
          </button>
        )}
      </div>

      {/* ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô */}
      {monthlySummary && (
        <div className="bg-white shadow-md p-4 rounded mb-6">
          <h2 className="text-lg font-bold mb-3">üìÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h2>
          <ul className="text-base text-gray-800 space-y-1">
            <li>üìÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {monthlySummary.month} / {monthlySummary.year}</li>
            <li>üßæ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°: {monthlySummary.total.toLocaleString()} ‡∏ø</li>
            <li>‚úÖ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {monthlySummary.orders} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</li>
            <li>üí∞ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {monthlySummary.paid} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</li>
          </ul>
        </div>
      )}

      <div className="bg-white shadow-md p-4 rounded">
        <h2 className="text-lg font-bold mb-3">
          <span role="img">üìä</span> ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô
        </h2>

        {loading ? (
          <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
        ) : error ? (
          <p className="text-red-500">{error}</p>
        ) : summary.length === 0 ? (
          <p className="text-gray-500">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ</p>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full border text-base text-center">
              <thead className="bg-blue-100 text-gray-800">
                <tr>
                  <th className="border px-4 py-3 font-semibold">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                  <th className="border px-4 py-3 font-semibold">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡∏ø)</th>
                  <th className="border px-4 py-3 font-semibold">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</th>
                  <th className="border px-4 py-3 font-semibold">‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß</th>
                </tr>
              </thead>
              <tbody className="bg-white">
                {summary.map((day, i) => (
                  <tr key={i} className="hover:bg-gray-50">
                    <td className="border px-4 py-3">{day.date}</td>
                    <td className="border px-4 py-3">{day.total.toLocaleString()} ‡∏ø</td>
                    <td className="border px-4 py-3">{day.orders}</td>
                    <td className="border px-4 py-3">{day.paid}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
};

export default OrderHistory;
